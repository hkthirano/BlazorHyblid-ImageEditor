@page "/"
@inject IJSRuntime JS
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject Microsoft.Extensions.Configuration.IConfiguration config

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PickAndShow">Open Image</MudButton>

<img id="image" />

@code {
    private string? imageSource;

    private async Task PickAndShow()
    {
        try
        {
            var result = await FilePicker.Default.PickAsync();
            if (result != null)
            {
                if (result.FileName.EndsWith("jpg", StringComparison.OrdinalIgnoreCase) ||
                    result.FileName.EndsWith("png", StringComparison.OrdinalIgnoreCase))
                {
                    using var imageStream = await result.OpenReadAsync();
                    var dotnetImageStream = new DotNetStreamReference(imageStream);
                    await JS.InvokeVoidAsync("setImage", "image", dotnetImageStream);
                }
            }
        }
        catch (Exception ex)
        {
            // The user canceled or something went wrong
        }
    }
}

@if (getImageError || branches is null)
{
    <p>Unable to get branches from GitHub. Please try again later.</p>
}
else
{
    <ul>
        @foreach (var branch in branches)
        {
            <li>@branch.Name</li>
        }
    </ul>
}

@code {
    private IEnumerable<GitHubBranch>? branches = [];
    private Models.ImageListInfo? imageInfo;
    private bool getImageError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var PixabayAPIKey = config["PixabayAPIKey"];
        var parameters = new Dictionary<string, string>()
        {
            { "key", PixabayAPIKey }
        };
        var queryParams = await new FormUrlEncodedContent(parameters).ReadAsStringAsync();
        var request = new HttpRequestMessage(HttpMethod.Get, $"https://pixabay.com/api/?{queryParams}");
        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            Console.WriteLine(responseStream);
            imageInfo = await JsonSerializer.DeserializeAsync
                <Models.ImageListInfo>(responseStream);
        }
        else
        {
            getImageError = true;
        }
        getImageError = true;
    }

    public class GitHubBranch
    {
        [JsonPropertyName("name")]
        public string? Name { get; set; }
    }
}